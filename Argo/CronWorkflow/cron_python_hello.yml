apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: cron-python-hello # or use generateName
  namespace: argo
  labels:
    app: python-hello
    environment: production
  annotations:
    description: "Runs Python Hello scripts on schedule"
spec:
  schedule: "0 0 * * *"  # Runs daily at midnight
  concurrencyPolicy: Replace  # Options: Allow, Forbid, Replace
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  workflowSpec:
    serviceAccountName: argo-workflows-server
    entrypoint: run-script
    templates:
    - name: run-script
      dag:
        tasks:
        - name: hello-task
          template: run-script-hello
        - name: dynamic-hello-task
          template: run-script-hello-dynamic
          dependencies: ["hello-task"]
    - name: notify-status
      steps:
      - - name: send-slack
          template: slack-notification
          arguments:
            parameters:
            - name: status
              value: "{{workflow.status}}"

    ## the hello scripts
    - name: run-script-hello
      container:
        image: ghcr.io/walthertimmer/python-data-engineering/python-scripts:latest
        command: ["python", "/scripts/hello.py"]
        imagePullPolicy: Always
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"

    - name: run-script-hello-dynamic
      container:
        image: ghcr.io/walthertimmer/python-data-engineering/python-scripts:latest
        command: ["python", "/scripts/hello_dynamic.py"]
        imagePullPolicy: Always
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: NAME
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: NAME
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000

    ## the slack notification
    - name: slack-notification
      inputs:
          parameters:
          - name: status
      container:
        image: curlimages/curl
        command: ["/bin/sh", "-c"]
        args:
        - |
          MESSAGE=$(cat << EOF
          *Workflow Details*
          • Name: {{workflow.name}}
          • Status: {{inputs.parameters.status}}
          • Namespace: {{workflow.namespace}}
          • ID: {{workflow.uid}}
          • Start: {{workflow.creationTimestamp}}
          • Duration: {{workflow.duration}}
          • Node: {{pod.name}}
          EOF
          )
          echo "Sending Slack notification: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          $(SLACK_WEBHOOK_URL) 2>&1
        env:
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: python-data-engineering
              key: SLACK_WEBHOOK_URL
          
    ## Add onExit handler
    onExit: notify-status
    
  ## Workflow-level retry strategy
  # retryStrategy:
  #   limit: 1
  #   retryPolicy: OnError
  ## must complete in 8h (28,800 seconds)
  activeDeadlineSeconds: 28800
  ## keep workflows for 1d (86,400 seconds)
  ttlStrategy:
    secondsAfterCompletion: 604800  # 7 days (7 * 24 * 60 * 60)
    successfulWorkflowTTL: "168h"   # 7 days in hours
    failedWorkflowTTL: "168h"       # 7 days in hours
  ## delete all pods as soon as they complete
  podGC:
    strategy: OnWorkflowSuccess # OnWorkflowSuccess, OnWorkflowCompletion
    minSuccessfulWorkflowsToRetain: 1


