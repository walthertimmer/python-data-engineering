apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: cron-load-warehouse-dask
  namespace: argo
  labels:
    app: cron-load-warehouse-dask
    environment: production
  annotations:
    description: "Process raw data to warehouse using Dask on S3"
spec:
  schedule: "0 2 * * 0"  # Runs every Sunday at 2 AM
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  workflowSpec:
    serviceAccountName: argo-workflows-server
    entrypoint: run-script
    templates:
    - name: run-script
      dag:
        tasks:
        - name: load-warehouse-rdw-defects
          template: load-warehouse-rdw-defects
          dependencies: [load-warehouse-dummy]
        - name: load-warehouse-dummy
          template: load-warehouse-dummy
          dependencies: []

    - name: load-warehouse-rdw-defects
      container:
        image: ghcr.io/walthertimmer/python-data-engineering/python-scripts:latest
        command: ["python", "/scripts/20_load_warehouse_dask.py"]
        imagePullPolicy: Always
        resources:
          requests:
            memory: "8Gi"
            cpu: "1000m"
          limits:
            memory: "10Gi"
            cpu: "4000m"
        env:
          - name: S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ACCESS_KEY_ID
                namespace: argo
          - name: S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_SECRET_ACCESS_KEY
                namespace: argo
          - name: S3_ENDPOINT_URL
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ENDPOINT_URL
                namespace: argo
          - name: S3_BUCKET
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_BUCKET
                namespace: argo
          - name: SOURCE_PATH
            value: "raw/rdw-defects/*"
          - name: TARGET_PATH 
            value: "dask/rdwdefects/"
          - name: FILE_FORMAT
            value: "csv"
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        workingDir: /workdir

    - name: load-warehouse-dummy
      container:
        image: ghcr.io/walthertimmer/python-data-engineering/python-scripts:latest
        command: ["python", "/scripts/20_load_warehouse_dask.py"]
        imagePullPolicy: Always
        resources:
          requests:
            memory: "1Gi"
            cpu: "100m"
          limits:
            memory: "10Gi"
            cpu: "4000m"
        env:
          - name: S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ACCESS_KEY_ID
                namespace: argo
          - name: S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_SECRET_ACCESS_KEY
                namespace: argo
          - name: S3_ENDPOINT_URL
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ENDPOINT_URL
                namespace: argo
          - name: S3_BUCKET
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_BUCKET
                namespace: argo
          - name: SOURCE_PATH
            value: "raw/dummy/*"
          - name: TARGET_PATH 
            value: "dask/dummy/"
          - name: FILE_FORMAT
            value: "csv"
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        workingDir: /workdir

    - name: notify-status
      steps:
      - - name: send-slack
          template: slack-notification
          arguments:
            parameters:
            - name: status
              value: "{{workflow.status}}"

    - name: slack-notification
      inputs:
        parameters:
        - name: status
      container:
        image: curlimages/curl
        command: ["/bin/sh", "-c"]
        args:
        - |
          MESSAGE=$(cat << EOF
          *Workflow Details*
          • Name: {{workflow.name}}
          • Status: {{inputs.parameters.status}}
          • Namespace: {{workflow.namespace}}
          • ID: {{workflow.uid}}
          • Start: {{workflow.creationTimestamp}}
          • Duration: {{workflow.duration}}
          • Node: {{pod.name}}
          EOF
          )
          echo "Sending Slack notification: $MESSAGE"
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          $(SLACK_WEBHOOK_URL) 2>&1
        env:
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: python-data-engineering
              key: SLACK_WEBHOOK_URL

    volumes:
    - name: workdir
      emptyDir: {}

    onExit: notify-status

    activeDeadlineSeconds: 7200  # Must complete within 2 hours
    ttlStrategy:
      secondsAfterCompletion: 604800  # 7 days
      successfulWorkflowTTL: "168h"   # 7 days in hours
      failedWorkflowTTL: "168h"       # 7 days in hours
    podGC:
      strategy: OnWorkflowCompletion
      labelSelector:
        matchLabels:
          workflows.argoproj.io/completed: "true"
      minSuccessfulWorkflowsToRetain: 1
      minFailedWorkflowsToRetain: 1