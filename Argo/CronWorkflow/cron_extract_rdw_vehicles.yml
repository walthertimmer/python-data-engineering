apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: cron-extract-rdw-vehicles
  namespace: argo
  labels:
    app: python-rdw-vehicles
    environment: production
  annotations:
    description: "Weekly extraction of RDW vehicle data to S3"
spec:
  schedule: "0 0 * * 1"  # Runs every Monday at midnight
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  workflowSpec:
    serviceAccountName: argo-workflows-server
    entrypoint: run-script
    templates:
    - name: run-script
      dag:
        tasks:
        - name: extract-rdw-data
          template: extract-rdw-data

    - name: extract-rdw-data
      container:
        image: ghcr.io/walthertimmer/python-data-engineering/python-scripts:latest
        command: ["python", "/scripts/10_extract_rdw_vehicles.py"]
        imagePullPolicy: Always
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
        env:
          - name: S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ACCESS_KEY_ID
                namespace: argo
          - name: S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_SECRET_ACCESS_KEY
                namespace: argo
          - name: S3_ENDPOINT_URL
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_ENDPOINT_URL
                namespace: argo
          - name: S3_BUCKET
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: S3_BUCKET
                namespace: argo
          - name: RDW_APP_TOKEN
            valueFrom:
              secretKeyRef:
                name: python-data-engineering
                key: RDW_APP_TOKEN
                namespace: argo
          - name: TARGET_LOCATION
            value: "raw/rdw-vehicles/"
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        workingDir: /workdir
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
      volumes:
        - name: workdir
          emptyDir: {}

    # retryStrategy:
    #   limit: 1
    #   retryPolicy: OnError
    activeDeadlineSeconds: 72000  # Must complete within 20 hour
    ttlStrategy:
      secondsAfterCompletion: 604800  # 7 days (7 * 24 * 60 * 60)
      successfulWorkflowTTL: "168h"   # 7 days in hours
      failedWorkflowTTL: "168h"       # 7 days in hours
    podGC:
      strategy: OnWorkflowSuccess
      minSuccessfulWorkflowsToRetain: 1  # Keep pods from last 1 successful workflows